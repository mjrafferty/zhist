#! /usr/bin/env zsh
# vim:ft=zsh

typeset -i SQLITE_PID=0
typeset -i DB_INODE=0
typeset -i LAST_CHECK_IN

__exit () {
  kill "$SQLITE_PID"
  rm "$__ZHIST_PIPE"
  rm "$__ZHIST_PID_FILE"
  exit
}

__createdb () {
  mkdir -p "$(dirname "${ZHIST_DB}")"

  sqlite3 "${ZHIST_DB}" <<- EOF
  CREATE TABLE commands (
    id integer primary key autoincrement,
    argv TEXT,
    UNIQUE(argv) ON CONFLICT IGNORE
  );
  CREATE TABLE places (
    id integer primary key autoincrement,
    host TEXT,
    dir TEXT,
    UNIQUE(host, dir) ON CONFLICT IGNORE
  );
  CREATE TABLE users (
    id integer primary key autoincrement,
    user TEXT,
    UNIQUE(user) ON CONFLICT IGNORE
  );
  CREATE TABLE history (
    id integer primary key autoincrement,
    session int,
    command_id int REFERENCES commands (id),
    place_id int REFERENCES places (id),
    user_id int REFERENCES users (id),
    exit_status INT,
    start_time INT,
    duration INT
  );
EOF
}

__checkPipe() {
  if [[ ! -p "${__ZHIST_PIPE}" ]]; then
    [[ -e "${__ZHIST_PIPE}" ]] && rm "$__ZHIST_PIPE"
    mkfifo "${__ZHIST_PIPE}"
    chmod 600 "${__ZHIST_PIPE}"

    if ((SQLITE_PID!=0)); then
      kill "$SQLITE_PID"
      SQLITE_PID=0
    fi
  fi
}

__checkPidFile() {
  if [[ ! -e "$__ZHIST_PID_FILE" ]]; then
    echo "$$" >| "${__ZHIST_PID_FILE}"
    chmod 600 "$__ZHIST_PID_FILE"
  fi
}

__checkDB () {
  if  [[ ! -s "${ZHIST_DB}" ]]; then
    __createdb;
    DB_INODE=0
    if ((SQLITE_PID!=0)); then
      kill "$SQLITE_PID"
      SQLITE_PID=0
    fi
  fi

  zstat -A stats +inode "${ZHIST_DB}"

  if ((DB_INODE==0)); then
    DB_INODE="${stats[1]}"
  elif ((DB_INODE != stats[1])); then
    DB_INODE="${stats[1]}"
    if ((SQLITE_PID!=0)); then
      kill "$SQLITE_PID"
      SQLITE_PID=0
    fi
  fi
}

__checkSqlite() {
  local pipe_fd

  if ((SQLITE_PID!=0)); then
    if ! \kill -0 "${SQLITE_PID}"; then
      SQLITE_PID=0
    fi
  fi

  if ((SQLITE_PID==0)); then
    exec {pipe_fd}<> "${__ZHIST_PIPE}"
    sqlite3 "${ZHIST_DB}" < ${__ZHIST_PIPE} &
    SQLITE_PID="$!"
    exec {pipe_fd}>&-
  fi
}

__check() {
  if ((LAST_CHECK_IN < (EPOCHSECONDS - ZHIST_IDLE_TIMEOUT))); then
    exit;
  fi
  __checkPipe
  __checkDB
  __checkSqlite
  __checkPidFile
}

__refresh() {
  LAST_CHECK_IN="${EPOCHSECONDS}"
  return 0
}

main() {
  emulate -LR zsh
  trap __exit EXIT HUP INT QUIT ABRT KILL TERM 
  trap __refresh USR1
  trap __check ALRM
  TMOUT=15

  zmodload zsh/stat 
  zmodload zsh/datetime

  LAST_CHECK_IN="${EPOCHSECONDS}"

  # For some reason TMOUT doesn't work until after the first SIGALRM 
  kill -s ALRM $$

  while true; do
    __check
    wait "${SQLITE_PID}"
  done
}

main "$@"
